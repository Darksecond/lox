program -> declaration* EOF ;

declaration -> varDecl
             | funDecl
             | classDecl
             | statement 
             ;

statement -> exprStmt 
           | printStmt 
           | ifStmt
           | whileStmt
           | forStmt
           | returnStmt
           | block
           ;

forStmt -> "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
returnStmt -> "return" expression? ";" ;
whileStmt -> "while" "(" expression ")" statement ;
block -> "{" declaration* "}" ;
exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;
ifStmt -> "if" "(" expression ")" statement ( "else" statement )? ;

classDecl -> "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}" ;
funDecl -> "fun" function ;
varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

expression -> assignment ;
assignment -> ( call "." )? identifier "=" assignment | logic_or ;
logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;
equality -> comparison ( ("!="|"==") comparison )* ;
comparison -> addition ( (">"|">="|"<"|"<=") addition )* ;
addition -> multiplication ( ("-"|"+") multiplication )* ;
multiplication -> unary ( ("/"|"*") unary )* ;
unary -> ("!"|"-") unary | call ;
call -> primary ( "(" arguments? ")" | "." IDENTIFIER )*;
primary -> NUMBER | STRING | "false" | "true" | "nil" | "(" expression ")" 
    | IDENTIFIER | "this" | "super" "." IDENTIFIER ;

arguments -> expression ( "," expression )* ;
function -> IDENTIFIER "(" parameters? ")" block ;
parameters -> IDENTIFIER ( "," IDENTIFIER )* ;